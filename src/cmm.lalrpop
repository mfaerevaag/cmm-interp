use std::str::FromStr;
use ast::{Expr, Op};
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

pub Prog = Comma<Expr>;

Comma<T>: Vec<T> = { // (0)
    <v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<BinOp,NextTier>: Box<Expr> = {
    Tier<BinOp,NextTier> BinOp NextTier => Box::new(Expr::BinOp(<>)),
    NextTier
};

Expr = Tier<ExprBinOp, Factor>;
Factor = Tier<FactorBinOp, Term>;

ExprBinOp: Op = { // (3)
    "+" => Op::Add,
    "-" => Op::Sub,
};

FactorBinOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
};

Term: Box<Expr> = {
    Num,
    "(" <Expr> ")",
    Ident,
    ! => { errors.push(<>); Box::new(Expr::Error) },
};

Num: Box<Expr> = {
    r"\d+" => Box::new(Expr::Number(i32::from_str(<>).unwrap())),
};

Ident: Box<Expr> = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Box::new(Expr::Ident(<>.to_string())),
};
