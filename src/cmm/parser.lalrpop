use std::str::FromStr;
use ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);


// macros

Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> =>
        h.into_iter().chain(t).collect()
};

// token precedence

match {
    "void",
    "return",
    "extern",
    "if",
    "else",
    "while",
    "for",
    "continue",
    "break",

    "int",
    "char",

} else {
    r"[0-9]+" => TInt,
    r#""\w*""# => TString,
    r#"'\w'"# => TChar,

} else {
    r"[a-zA-Z][a-zA-Z0-9_]*" => TIdent,

    _
}

// production rules

pub Prog: CProg<'input> = <l:(<ProgElem>)*> => {
    l.into_iter().flat_map(|x| x.to_vec()).collect()
};

ProgElem: Vec<CProgElem<'input>> = {
    // VarDecl
    <l:Type> <m:VarArray> <r:("," <VarArray>)*> ";" => {
        vec![m].into_iter().chain(r).map(|(id, s)| {
            CProgElem::VarDecl((l.clone(), id, s))
        }).collect()
    },
    // Proto
    Proto,
    // Func
    Func => vec![CProgElem::Func(<>)],
};

Proto: Vec<CProgElem<'input>> = {
    "void" <m:FuncDecl> <r:("," <FuncDecl>)*> ";" => {
        vec![m].into_iter().chain(r).map(|(id, ps)| {
            CProgElem::Proto(CProto {
                ret: None,
                name: id,
                params: ps,
            })
        }).collect()
    },
    <l:Type> <m:FuncDecl> <r:("," <FuncDecl>)*> ";" => {
        vec![m].into_iter().chain(r).map(|(id, ps)| {
            CProgElem::Proto(CProto {
                ret: Some(l.clone()),
                name: id,
                params: ps,
            })
        }).collect()
    },
};

pub Func: CFunc<'input> = {
    "void" <r:FuncDecl> "{"
        <decl:(<VarDecl> ";")*>
        <stmt:(<Stmt>)*> "}" =>
    {
        let (id, param) = r;
        CFunc {
            proto: CProto {
                ret: None,
                name: id,
                params: param,
            },
            decls: decl.into_iter().flat_map(|x| x.to_vec()).collect(),
            stmts: stmt,
        }
    },
    <l:Type> <r:FuncDecl> "{"
        <decl:(<VarDecl> ";")*>
        <stmt:(<Stmt>)*> "}" =>
    {
        let (id, param) = r;
        CFunc {
            proto: CProto {
                ret: Some(l),
                name: id,
                params: param,
            },
            decls: decl.into_iter().flat_map(|x| x.to_vec()).collect(),
            stmts: stmt,
        }
    },
};

FuncDecl: (CIdent<'input>, Vec<CParam<'input>>) = {
    <id:Ident> "(" <param:FuncParam> ")" => (id, param),
};

FuncParam: Vec<CParam<'input>> = {
    Comma<Param>,
    "void" => Vec::new(),
};

Param: CParam<'input> = {
    <t:Type> <r:Ident> "[" "]" => (CType::Ref(Box::new(t)), r),
    <t:Type> <r:Ident> => (<>),
};

// variable declaration

VarDecl: Vec<CVarDecl<'input>> = {
    <t:Type> <r:Comma<VarArray>> => {
        Vec::from(r).into_iter().map(|x| match x {
            (id, None) => ((t.clone(), id, None)),
            (id, s) => (CType::Ref(Box::new(t.clone())), id, s),
        }).collect()
    },
};

VarArray: (CIdent<'input>, Option<usize>) = {
    <l:Ident> "[" <r:TInt> "]" => (l, Some(usize::from_str(r).unwrap())),
    Ident => (<>, None),
};

// statements

pub Stmt: CStmt<'input> = {
    Stmt_ => *<>,
};

Stmt_: Box<CStmt<'input>> = {
    StmtIfMatching,
    StmtIfUnmatching,
};

StmtIfMatching: Box<CStmt<'input>> = {
    <l:@L> "if" "(" <cond:Expr> ")" <stmt:StmtIfMatching> "else" <stmt2:StmtIfMatching> <r:@R> =>
        Box::new(CStmt::If((l, r), *cond, stmt, Some(stmt2))),
    StmtOther,
};

StmtIfUnmatching: Box<CStmt<'input>> = {
    <l:@L> "if" "(" <cond:Expr> ")" <stmt:StmtIfMatching> <r:@R> =>
        Box::new(CStmt::If((l, r), *cond, stmt, None)),
    <l:@L> "if" "(" <cond:Expr> ")" <stmt:StmtIfMatching> "else" <stmt2:StmtIfUnmatching> <r:@R> =>
        Box::new(CStmt::If((l, r), *cond, stmt, Some(stmt2))),
};

StmtOther: Box<CStmt<'input>> = {
    // assignment
    <StmtAssign> ";",

    // return
    <l:@L> "return" <e:Expr> ";" <r:@R> =>
        Box::new(CStmt::Return((l, r), Some(*e))),
    <l:@L> "return" ";" <r:@R> =>
        Box::new(CStmt::Return((l, r), None)),

    // block
    <l:@L> "{" <s:(<Stmt_>)*> "}" <r:@R> =>
        Box::new(CStmt::Block((l, r), s)),

    // while
    <l:@L> "while" "(" <cond:Expr> ")" <stmt:StmtIfMatching> <r:@R> =>
        Box::new(CStmt::While((l, r), *cond, stmt)),

    // for
    <l:@L> "for" "(" <init:StmtAssign?> ";" <cond:Expr?> ";" <inc:StmtAssign?> ")" <stmt:StmtIfMatching> <r:@R> => {
        let cond = match cond {
            Some(e) => Some(*e),
            None => None,
        };
        Box::new(CStmt::For((l, r), init, cond, inc, stmt))
    },

    // error
    // ! => { errors.push(<>); Box::new(CStmt::Error) },
};

StmtAssign: Box<CStmt<'input>> = {
    <l:@L> <i:Ident> "=" <e:Expr> <r:@R> =>
        Box::new(CStmt::Assign((l, r), i, *e)),
};

// expression

Expr: Box<CExpr<'input>> = {
    <l:Expr> <op:ExprOp> <r:Factor> => Box::new(CExpr::BinOp(op, l, r)),
    Factor,
};

Factor: Box<CExpr<'input>> = {
    <l:Factor> <op:FactorOp> <r:Term> => Box::new(CExpr::BinOp(op, l, r)),
    Term,
};

Term: Box<CExpr<'input>> = {
    Num => Box::new(CExpr::Num(<>)),
    Str => Box::new(CExpr::Str(<>)),
    Char => Box::new(CExpr::Char(<>)),

    Ident => Box::new(CExpr::Ident(<>)),

    <op:TermOp> <r:Term> => Box::new(CExpr::UnOp(op, r)),

    // call
    <i:Ident> "(" <p:Comma<Expr>> ")" => Box::new(CExpr::Call(i, p)),
    // array index
    <i:Ident> "[" <r:Expr> "]" => Box::new(CExpr::Index(i, r)),
    "(" <Expr> ")",

    // ! => { errors.push(<>); Box::new(CExpr::Error) },
};

ExprOp: COp = {
    "+" => COp::Add,
    "-" => COp::Sub,
};

FactorOp: COp = {
    "*" => COp::Mul,
    "/" => COp::Div,
};

TermOp: COp = {
    "-" => COp::Neg,
    "!" => COp::Not,
};

// simple stuff

Num: CInt = {
    TInt => i32::from_str(<>).unwrap(),
};

Str: CString = {
    TString => {
        let mut s = String::from(<>.get(1..).unwrap());
        s.pop();
        s
    },
};

Char: CChar = {
    TChar => <>.chars().nth(1).unwrap(),
};

Ident: &'input str = {
    TIdent => <>,
};

Type: CType = {
    "int" => CType::Int,
    "char" => CType::Char,
};
