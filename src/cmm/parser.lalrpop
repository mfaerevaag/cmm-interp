use std::str::FromStr;
use ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);


// macros

Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> =>
        h.into_iter().chain(t).collect()
};


// token precedence

match {
    "void",
    "return",
    "extern",
    "if",
    "else",
    "while",
    "for",
    "continue",
    "break",

    "int",
    "char",

} else {
    r"[0-9]+" => TInt,

} else {
    r"[a-zA-Z][a-zA-Z0-9_]*" => TIdent,

    _
}


// production rules

pub Prog: CProg<'input> = <l:(<ProgElem>)*> => {
    l.into_iter().flat_map(|x| x.to_vec()).collect()
};

ProgElem: Vec<Box<CProgElem<'input>>> = {
    // "extern" <p:ProtoDecl> => Box::new(p), // TODO

    // vardecl // TODO
    // <l:VarDecl> ";" => {
    //     Vec::from(l).into_iter()
    //         .map(|x| Box::new(CProgElem::VarDecl(x))).collect()
    // },

    // proto
    <l:FuncType> <r:Comma<FuncDecl>> ";" => {
        Vec::from(r).into_iter().map(|x| match x {
            (id, ps) => Box::new(CProgElem::Proto(Box::new(CProto {
                ret: l.clone(),
                name: id,
                params: ps,
            }))),
        }).collect()
    },

    // function
    Func => vec![Box::new(CProgElem::Func(<>))],
};

Func: Box<CFunc<'input>> = {
    <l:FuncType> <r:FuncDecl> "{"
        <decl:(<VarDecl> ";")*>
        <stmt:(<Stmt>)*> "}" =>
    {
        let flat_decl = decl.into_iter().flat_map(|x| x.to_vec()).collect();
        let (id, param) = r;
        Box::new(CFunc {
            proto: Box::new(CProto {
                ret: l,
                name: id,
                params: param,
            }),
            decls: flat_decl,
            stmts: stmt,
        })
    },
};

FuncDecl: (CIdent<'input>, Vec<Box<CParam<'input>>>) = {
    <id:Ident> "(" <param:FuncParam> ")" => (id, param),
};

FuncType: Option<CType> = {
    Type => Some(<>),
    "void" => None,
};

FuncParam: Vec<Box<CParam<'input>>> = {
    Comma<Param>,
    "void" => Vec::new(),
};

Param: Box<CParam<'input>> = {
    <t:Type> <r:Ident> "[" "]" => Box::new((CType::Ref(Box::new(t)), r)),
    <t:Type> <r:Ident> => Box::new((<>)),
};

VarDecl: Vec<Box<CVarDecl<'input>>> = {
    <t:Type> <r:Comma<VarArray>> => {
        Vec::from(r).into_iter().map(|x| match x {
            (id, None) => Box::new((t.clone(), id, None)),
            (id, s) => Box::new((CType::Ref(Box::new(t.clone())), id, s)),
        }).collect()
    },
};

VarArray: (CIdent<'input>, Option<usize>) = {
    <l:Ident> "[" <r:TInt> "]" => (l, Some(usize::from_str(r).unwrap())),
    Ident => (<>, None),
};

pub Stmt: Box<CStmt<'input>> = {
    // assignment
    <l:@L> <i:Ident> "=" <e:Expr> ";" <r:@R> => Box::new(CStmt::Assign((l, r), i, e)),
    // return
    <l:@L> "return" <e:Expr> ";" <r:@R> => Box::new(CStmt::Return((l, r), Some(e))),
    <l:@L> "return" ";" <r:@R> => Box::new(CStmt::Return((l, r), None)),
    // block
    <l:@L> "{" <s:(<Stmt>)*> "}" <r:@R> => Box::new(CStmt::Block((l, r), s)),
    // error
    // ! => { errors.push(<>); Box::new(CStmt::Error) },
};

Expr: Box<CExpr<'input>> = {
    // "-" <r:Expr> => Box::new(CExpr::UnOp(r)), // TODO
    <l:Expr> <op:ExprOp> <r:Factor> => Box::new(CExpr::BinOp(op, l, r)),
    Factor,
};

Factor: Box<CExpr<'input>> = {
    <l:Factor> <op:FactorOp> <r:Term> => Box::new(CExpr::BinOp(op, l, r)),
    Term,
};

Term: Box<CExpr<'input>> = {
    Num => Box::new(CExpr::Number(<>)),
    Ident => Box::new(CExpr::Ident(<>)),

    <op:TermOp> <r:Term> => Box::new(CExpr::UnOp(op, r)),

    // call
    <i:Ident> "(" <p:Comma<Expr>> ")" => Box::new(CExpr::Call(i, p)),
    // array index
    <i:Ident> "[" <r:Expr> "]" => Box::new(CExpr::Index(i, r)),
    "(" <Expr> ")",

    // ! => { errors.push(<>); Box::new(CExpr::Error) },
};

ExprOp: COp = {
    "+" => COp::Add,
    "-" => COp::Sub,
};

FactorOp: COp = {
    "*" => COp::Mul,
    "/" => COp::Div,
};

TermOp: COp = {
    "-" => COp::Neg,
    "!" => COp::Not,
};

Num: i32 = {
    TInt => i32::from_str(<>).unwrap(),
};

Ident: &'input str = {
    TIdent => <>,
};

Type: CType = {
    "int" => CType::Int,
    "char" => CType::Char,
};
