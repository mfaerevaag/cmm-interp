use std::str::FromStr;
use ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

// top level rule

pub Prog = Func;

// util rules

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<BinOp,NextTier>: Box<CExpr> = {
    Tier<BinOp,NextTier> BinOp NextTier => Box::new(CExpr::BinOp(<>)),
    NextTier
};

// production rules

Func: Box<CFunc> = {
    <rt:FuncType> <id:Ident> "(" <pt:ParamDecl> ")" "{" <d:(<Decl> ";")*> <s:(<Stmt> ";")*> "}" =>
        Box::new(CFunc {
            ret_type: rt,
            name: id,
            params: pt,
            decls: d,
            stmts: s
        }),
};

FuncType: Option<CType> = {
    Type => Some(<>),
    "void" => None,
};

ParamDecl: Vec<Box<CParam>> = {
    Comma<Param>,
    "void" => Vec::new(),
};

Param: Box<CParam> = {
    <l:Type> <r:Ident> => Box::new((l, r)),
};

Decl: Box<CDecl> = {
    <l:Type> <r:Comma<Ident>> => Box::new((l, r)),
};

Stmt: Box<CStmt> = {
    <l:Ident> "=" <r:Expr> => Box::new(CStmt::Assign(l, r)),
    "return" <r:Expr> => Box::new(CStmt::Return(Some(r))),
    "return" => Box::new(CStmt::Return(None)),
    // ! => { errors.push(<>); Box::new(CStmt::Error) },
};

Expr = Tier<CExprBinOp, Factor>;
Factor = Tier<FactorBinOp, Term>;

CExprBinOp: COp = {
    "+" => COp::Add,
    "-" => COp::Sub,
};

FactorBinOp: COp = {
    "*" => COp::Mul,
    "/" => COp::Div,
};

Term: Box<CExpr> = {
    Num => Box::new(CExpr::Number(<>)),
    Ident => Box::new(CExpr::Ident(<>)),
    "(" <Expr> ")",
    // ! => { errors.push(<>); Box::new(CExpr::Error) },
};

Num: i32 = {
    r"\d+" => i32::from_str(<>).unwrap(),
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
};

Type: CType = {
    "int" => CType::Int,
    "char" => CType::Char,
};
