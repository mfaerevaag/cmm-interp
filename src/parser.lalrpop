use std::str::FromStr;
use ast::{CExpr, COp};
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

// top level rule

pub Prog = Comma<Expr>;

// util rules

semicolon: () = {
    ";",
};

comma: () = {
    ",",
};

Comma<T>: Vec<T> = {
    <v:(<T> comma)*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<BinOp,NextTier>: Box<CExpr> = {
    Tier<BinOp,NextTier> BinOp NextTier => Box::new(CExpr::BinOp(<>)),
    NextTier
};

// production rules

Expr = Tier<CExprBinOp, Factor>;
Factor = Tier<FactorBinOp, Term>;

CExprBinOp: COp = {
    "+" => COp::Add,
    "-" => COp::Sub,
};

FactorBinOp: COp = {
    "*" => COp::Mul,
    "/" => COp::Div,
};

Term: Box<CExpr> = {
    Num,
    "(" <Expr> ")",
    Ident,
    ! => { errors.push(<>); Box::new(CExpr::Error) },
};

Num: Box<CExpr> = {
    r"\d+" => Box::new(CExpr::Number(i32::from_str(<>).unwrap())),
};

Ident: Box<CExpr> = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Box::new(CExpr::Ident(<>.to_string())),
};
